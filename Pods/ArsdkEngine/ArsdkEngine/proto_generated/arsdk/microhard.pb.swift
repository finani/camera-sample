// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: arsdk/microhard.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Arsdk_Microhard_Bandwidth: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case bandwidth1Mhz // = 0
  case bandwidth2Mhz // = 1
  case bandwidth4Mhz // = 2
  case bandwidth8Mhz // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .bandwidth1Mhz
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .bandwidth1Mhz
    case 1: self = .bandwidth2Mhz
    case 2: self = .bandwidth4Mhz
    case 3: self = .bandwidth8Mhz
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .bandwidth1Mhz: return 0
    case .bandwidth2Mhz: return 1
    case .bandwidth4Mhz: return 2
    case .bandwidth8Mhz: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Microhard_Bandwidth: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Microhard_Bandwidth] = [
    .bandwidth1Mhz,
    .bandwidth2Mhz,
    .bandwidth4Mhz,
    .bandwidth8Mhz,
  ]
}

#endif  // swift(>=4.2)

enum Arsdk_Microhard_Encryption: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case aes128 // = 1
  case aes256 // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .aes128
    case 2: self = .aes256
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .aes128: return 1
    case .aes256: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Microhard_Encryption: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Microhard_Encryption] = [
    .none,
    .aes128,
    .aes256,
  ]
}

#endif  // swift(>=4.2)

enum Arsdk_Microhard_HardwareErrorCause: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case `internal` // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .internal
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .internal
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .internal: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Microhard_HardwareErrorCause: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Microhard_HardwareErrorCause] = [
    .internal,
  ]
}

#endif  // swift(>=4.2)

enum Arsdk_Microhard_PairingFailureReason: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case internalError // = 0
  case alreadyPaired // = 1
  case deviceNotReachable // = 2
  case invalidState // = 3
  case invalidConfig // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .internalError
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .internalError
    case 1: self = .alreadyPaired
    case 2: self = .deviceNotReachable
    case 3: self = .invalidState
    case 4: self = .invalidConfig
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .internalError: return 0
    case .alreadyPaired: return 1
    case .deviceNotReachable: return 2
    case .invalidState: return 3
    case .invalidConfig: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Microhard_PairingFailureReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Microhard_PairingFailureReason] = [
    .internalError,
    .alreadyPaired,
    .deviceNotReachable,
    .invalidState,
    .invalidConfig,
  ]
}

#endif  // swift(>=4.2)

/// This is the entry point to send messages to the device
struct Arsdk_Microhard_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Arsdk_Microhard_Command.OneOf_ID? = nil

  var getState: Arsdk_Microhard_Command.GetState {
    get {
      if case .getState(let v)? = id {return v}
      return Arsdk_Microhard_Command.GetState()
    }
    set {id = .getState(newValue)}
  }

  var powerOn: Arsdk_Microhard_Command.PowerOn {
    get {
      if case .powerOn(let v)? = id {return v}
      return Arsdk_Microhard_Command.PowerOn()
    }
    set {id = .powerOn(newValue)}
  }

  var shutdown: Arsdk_Microhard_Command.ShutDown {
    get {
      if case .shutdown(let v)? = id {return v}
      return Arsdk_Microhard_Command.ShutDown()
    }
    set {id = .shutdown(newValue)}
  }

  var pairDevice: Arsdk_Microhard_Command.PairDevice {
    get {
      if case .pairDevice(let v)? = id {return v}
      return Arsdk_Microhard_Command.PairDevice()
    }
    set {id = .pairDevice(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    case getState(Arsdk_Microhard_Command.GetState)
    case powerOn(Arsdk_Microhard_Command.PowerOn)
    case shutdown(Arsdk_Microhard_Command.ShutDown)
    case pairDevice(Arsdk_Microhard_Command.PairDevice)

  #if !swift(>=4.1)
    static func ==(lhs: Arsdk_Microhard_Command.OneOf_ID, rhs: Arsdk_Microhard_Command.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.getState, .getState): return {
        guard case .getState(let l) = lhs, case .getState(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.powerOn, .powerOn): return {
        guard case .powerOn(let l) = lhs, case .powerOn(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.shutdown, .shutdown): return {
        guard case .shutdown(let l) = lhs, case .shutdown(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pairDevice, .pairDevice): return {
        guard case .pairDevice(let l) = lhs, case .pairDevice(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  struct GetState {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var includeDefaultCapabilities: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PowerOn {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct ShutDown {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct PairDevice {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var networkID: String = String()

    var encryptionKey: String = String()

    var pairingParameters: Arsdk_Microhard_PairingParameters {
      get {return _pairingParameters ?? Arsdk_Microhard_PairingParameters()}
      set {_pairingParameters = newValue}
    }
    /// Returns true if `pairingParameters` has been explicitly set.
    var hasPairingParameters: Bool {return self._pairingParameters != nil}
    /// Clears the value of `pairingParameters`. Subsequent reads from it will return its default value.
    mutating func clearPairingParameters() {self._pairingParameters = nil}

    var connectionParameters: Arsdk_Microhard_ConnectionParameters {
      get {return _connectionParameters ?? Arsdk_Microhard_ConnectionParameters()}
      set {_connectionParameters = newValue}
    }
    /// Returns true if `connectionParameters` has been explicitly set.
    var hasConnectionParameters: Bool {return self._connectionParameters != nil}
    /// Clears the value of `connectionParameters`. Subsequent reads from it will return its default value.
    mutating func clearConnectionParameters() {self._connectionParameters = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _pairingParameters: Arsdk_Microhard_PairingParameters? = nil
    fileprivate var _connectionParameters: Arsdk_Microhard_ConnectionParameters? = nil
  }

  init() {}
}

/// This is the entry point to receive messages from the device
struct Arsdk_Microhard_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Arsdk_Microhard_Event.OneOf_ID? = nil

  var state: Arsdk_Microhard_Event.State {
    get {
      if case .state(let v)? = id {return v}
      return Arsdk_Microhard_Event.State()
    }
    set {id = .state(newValue)}
  }

  var hardwareError: Arsdk_Microhard_Event.HardwareError {
    get {
      if case .hardwareError(let v)? = id {return v}
      return Arsdk_Microhard_Event.HardwareError()
    }
    set {id = .hardwareError(newValue)}
  }

  var pairing: Arsdk_Microhard_Event.Pairing {
    get {
      if case .pairing(let v)? = id {return v}
      return Arsdk_Microhard_Event.Pairing()
    }
    set {id = .pairing(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    case state(Arsdk_Microhard_Event.State)
    case hardwareError(Arsdk_Microhard_Event.HardwareError)
    case pairing(Arsdk_Microhard_Event.Pairing)

  #if !swift(>=4.1)
    static func ==(lhs: Arsdk_Microhard_Event.OneOf_ID, rhs: Arsdk_Microhard_Event.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.state, .state): return {
        guard case .state(let l) = lhs, case .state(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.hardwareError, .hardwareError): return {
        guard case .hardwareError(let l) = lhs, case .hardwareError(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.pairing, .pairing): return {
        guard case .pairing(let l) = lhs, case .pairing(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  struct State {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var defaultCapabilities: Arsdk_Microhard_Capabilities {
      get {return _defaultCapabilities ?? Arsdk_Microhard_Capabilities()}
      set {_defaultCapabilities = newValue}
    }
    /// Returns true if `defaultCapabilities` has been explicitly set.
    var hasDefaultCapabilities: Bool {return self._defaultCapabilities != nil}
    /// Clears the value of `defaultCapabilities`. Subsequent reads from it will return its default value.
    mutating func clearDefaultCapabilities() {self._defaultCapabilities = nil}

    var state: Arsdk_Microhard_Event.State.OneOf_State? = nil

    var offline: Arsdk_Microhard_State.Offline {
      get {
        if case .offline(let v)? = state {return v}
        return Arsdk_Microhard_State.Offline()
      }
      set {state = .offline(newValue)}
    }

    var booting: Arsdk_Microhard_State.Booting {
      get {
        if case .booting(let v)? = state {return v}
        return Arsdk_Microhard_State.Booting()
      }
      set {state = .booting(newValue)}
    }

    var idle: Arsdk_Microhard_State.Idle {
      get {
        if case .idle(let v)? = state {return v}
        return Arsdk_Microhard_State.Idle()
      }
      set {state = .idle(newValue)}
    }

    var pairing: Arsdk_Microhard_State.Pairing {
      get {
        if case .pairing(let v)? = state {return v}
        return Arsdk_Microhard_State.Pairing()
      }
      set {state = .pairing(newValue)}
    }

    var connecting: Arsdk_Microhard_State.Connecting {
      get {
        if case .connecting(let v)? = state {return v}
        return Arsdk_Microhard_State.Connecting()
      }
      set {state = .connecting(newValue)}
    }

    var connected: Arsdk_Microhard_State.Connected {
      get {
        if case .connected(let v)? = state {return v}
        return Arsdk_Microhard_State.Connected()
      }
      set {state = .connected(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_State: Equatable {
      case offline(Arsdk_Microhard_State.Offline)
      case booting(Arsdk_Microhard_State.Booting)
      case idle(Arsdk_Microhard_State.Idle)
      case pairing(Arsdk_Microhard_State.Pairing)
      case connecting(Arsdk_Microhard_State.Connecting)
      case connected(Arsdk_Microhard_State.Connected)

    #if !swift(>=4.1)
      static func ==(lhs: Arsdk_Microhard_Event.State.OneOf_State, rhs: Arsdk_Microhard_Event.State.OneOf_State) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.offline, .offline): return {
          guard case .offline(let l) = lhs, case .offline(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.booting, .booting): return {
          guard case .booting(let l) = lhs, case .booting(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.idle, .idle): return {
          guard case .idle(let l) = lhs, case .idle(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.pairing, .pairing): return {
          guard case .pairing(let l) = lhs, case .pairing(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.connecting, .connecting): return {
          guard case .connecting(let l) = lhs, case .connecting(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.connected, .connected): return {
          guard case .connected(let l) = lhs, case .connected(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _defaultCapabilities: Arsdk_Microhard_Capabilities? = nil
  }

  struct HardwareError {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var cause: Arsdk_Microhard_HardwareErrorCause = .internal

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Pairing {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var status: Arsdk_Microhard_Event.Pairing.OneOf_Status? = nil

    var failure: Arsdk_Microhard_PairingStatus.Failure {
      get {
        if case .failure(let v)? = status {return v}
        return Arsdk_Microhard_PairingStatus.Failure()
      }
      set {status = .failure(newValue)}
    }

    var success: Arsdk_Microhard_PairingStatus.Success {
      get {
        if case .success(let v)? = status {return v}
        return Arsdk_Microhard_PairingStatus.Success()
      }
      set {status = .success(newValue)}
    }

    var networkID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Status: Equatable {
      case failure(Arsdk_Microhard_PairingStatus.Failure)
      case success(Arsdk_Microhard_PairingStatus.Success)

    #if !swift(>=4.1)
      static func ==(lhs: Arsdk_Microhard_Event.Pairing.OneOf_Status, rhs: Arsdk_Microhard_Event.Pairing.OneOf_Status) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.failure, .failure): return {
          guard case .failure(let l) = lhs, case .failure(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.success, .success): return {
          guard case .success(let l) = lhs, case .success(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    init() {}
  }

  init() {}
}

struct Arsdk_Microhard_Capabilities {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var channelMin: UInt32 = 0

  var channelMax: UInt32 = 0

  var powerMin: UInt32 = 0

  var powerMax: UInt32 = 0

  var bandwidths: [Arsdk_Microhard_Bandwidth] = []

  var encryptionAlgorithms: [Arsdk_Microhard_Encryption] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Arsdk_Microhard_ConnectionParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var channel: UInt32 = 0

  var power: UInt32 = 0

  var bandwidth: Arsdk_Microhard_Bandwidth = .bandwidth1Mhz

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Arsdk_Microhard_State {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Offline {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Booting {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Idle {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Pairing {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var networkID: String = String()

    var pairingParameters: Arsdk_Microhard_PairingParameters {
      get {return _pairingParameters ?? Arsdk_Microhard_PairingParameters()}
      set {_pairingParameters = newValue}
    }
    /// Returns true if `pairingParameters` has been explicitly set.
    var hasPairingParameters: Bool {return self._pairingParameters != nil}
    /// Clears the value of `pairingParameters`. Subsequent reads from it will return its default value.
    mutating func clearPairingParameters() {self._pairingParameters = nil}

    var connectionParameters: Arsdk_Microhard_ConnectionParameters {
      get {return _connectionParameters ?? Arsdk_Microhard_ConnectionParameters()}
      set {_connectionParameters = newValue}
    }
    /// Returns true if `connectionParameters` has been explicitly set.
    var hasConnectionParameters: Bool {return self._connectionParameters != nil}
    /// Clears the value of `connectionParameters`. Subsequent reads from it will return its default value.
    mutating func clearConnectionParameters() {self._connectionParameters = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _pairingParameters: Arsdk_Microhard_PairingParameters? = nil
    fileprivate var _connectionParameters: Arsdk_Microhard_ConnectionParameters? = nil
  }

  struct Connecting {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var deviceUid: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Connected {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var deviceUid: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct Arsdk_Microhard_PairingParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var channel: UInt32 = 0

  var power: UInt32 = 0

  var bandwidth: Arsdk_Microhard_Bandwidth = .bandwidth1Mhz

  var encryptionAlgorithm: Arsdk_Microhard_Encryption = .none

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Arsdk_Microhard_PairingStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Failure {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var reason: Arsdk_Microhard_PairingFailureReason = .internalError

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Success {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var deviceUid: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "arsdk.microhard"

extension Arsdk_Microhard_Bandwidth: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BANDWIDTH_1MHZ"),
    1: .same(proto: "BANDWIDTH_2MHZ"),
    2: .same(proto: "BANDWIDTH_4MHZ"),
    3: .same(proto: "BANDWIDTH_8MHZ"),
  ]
}

extension Arsdk_Microhard_Encryption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENCRYPTION_NONE"),
    1: .same(proto: "ENCRYPTION_AES128"),
    2: .same(proto: "ENCRYPTION_AES256"),
  ]
}

extension Arsdk_Microhard_HardwareErrorCause: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HARDWARE_ERROR_CAUSE_INTERNAL"),
  ]
}

extension Arsdk_Microhard_PairingFailureReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PAIRING_FAILURE_REASON_INTERNAL_ERROR"),
    1: .same(proto: "PAIRING_FAILURE_REASON_ALREADY_PAIRED"),
    2: .same(proto: "PAIRING_FAILURE_REASON_DEVICE_NOT_REACHABLE"),
    3: .same(proto: "PAIRING_FAILURE_REASON_INVALID_STATE"),
    4: .same(proto: "PAIRING_FAILURE_REASON_INVALID_CONFIG"),
  ]
}

extension Arsdk_Microhard_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Command"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .standard(proto: "get_state"),
    17: .standard(proto: "power_on"),
    18: .same(proto: "shutdown"),
    19: .standard(proto: "pair_device"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 16: try {
        var v: Arsdk_Microhard_Command.GetState?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .getState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .getState(v)
        }
      }()
      case 17: try {
        var v: Arsdk_Microhard_Command.PowerOn?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .powerOn(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .powerOn(v)
        }
      }()
      case 18: try {
        var v: Arsdk_Microhard_Command.ShutDown?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .shutdown(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .shutdown(v)
        }
      }()
      case 19: try {
        var v: Arsdk_Microhard_Command.PairDevice?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .pairDevice(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .pairDevice(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.id {
    case .getState?: try {
      guard case .getState(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .powerOn?: try {
      guard case .powerOn(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .shutdown?: try {
      guard case .shutdown(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .pairDevice?: try {
      guard case .pairDevice(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Command, rhs: Arsdk_Microhard_Command) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Command.GetState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_Command.protoMessageName + ".GetState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "include_default_capabilities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.includeDefaultCapabilities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.includeDefaultCapabilities != false {
      try visitor.visitSingularBoolField(value: self.includeDefaultCapabilities, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Command.GetState, rhs: Arsdk_Microhard_Command.GetState) -> Bool {
    if lhs.includeDefaultCapabilities != rhs.includeDefaultCapabilities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Command.PowerOn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_Command.protoMessageName + ".PowerOn"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Command.PowerOn, rhs: Arsdk_Microhard_Command.PowerOn) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Command.ShutDown: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_Command.protoMessageName + ".ShutDown"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Command.ShutDown, rhs: Arsdk_Microhard_Command.ShutDown) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Command.PairDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_Command.protoMessageName + ".PairDevice"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_id"),
    2: .standard(proto: "encryption_key"),
    3: .standard(proto: "pairing_parameters"),
    4: .standard(proto: "connection_parameters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.networkID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.encryptionKey) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._pairingParameters) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._connectionParameters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.networkID.isEmpty {
      try visitor.visitSingularStringField(value: self.networkID, fieldNumber: 1)
    }
    if !self.encryptionKey.isEmpty {
      try visitor.visitSingularStringField(value: self.encryptionKey, fieldNumber: 2)
    }
    try { if let v = self._pairingParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._connectionParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Command.PairDevice, rhs: Arsdk_Microhard_Command.PairDevice) -> Bool {
    if lhs.networkID != rhs.networkID {return false}
    if lhs.encryptionKey != rhs.encryptionKey {return false}
    if lhs._pairingParameters != rhs._pairingParameters {return false}
    if lhs._connectionParameters != rhs._connectionParameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .same(proto: "state"),
    18: .standard(proto: "hardware_error"),
    19: .same(proto: "pairing"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 16: try {
        var v: Arsdk_Microhard_Event.State?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .state(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .state(v)
        }
      }()
      case 18: try {
        var v: Arsdk_Microhard_Event.HardwareError?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .hardwareError(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .hardwareError(v)
        }
      }()
      case 19: try {
        var v: Arsdk_Microhard_Event.Pairing?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .pairing(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .pairing(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.id {
    case .state?: try {
      guard case .state(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .hardwareError?: try {
      guard case .hardwareError(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .pairing?: try {
      guard case .pairing(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Event, rhs: Arsdk_Microhard_Event) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Event.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_Event.protoMessageName + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "default_capabilities"),
    2: .same(proto: "offline"),
    3: .same(proto: "booting"),
    4: .same(proto: "idle"),
    5: .same(proto: "pairing"),
    6: .same(proto: "connecting"),
    7: .same(proto: "connected"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._defaultCapabilities) }()
      case 2: try {
        var v: Arsdk_Microhard_State.Offline?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .offline(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .offline(v)
        }
      }()
      case 3: try {
        var v: Arsdk_Microhard_State.Booting?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .booting(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .booting(v)
        }
      }()
      case 4: try {
        var v: Arsdk_Microhard_State.Idle?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .idle(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .idle(v)
        }
      }()
      case 5: try {
        var v: Arsdk_Microhard_State.Pairing?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .pairing(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .pairing(v)
        }
      }()
      case 6: try {
        var v: Arsdk_Microhard_State.Connecting?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .connecting(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .connecting(v)
        }
      }()
      case 7: try {
        var v: Arsdk_Microhard_State.Connected?
        var hadOneofValue = false
        if let current = self.state {
          hadOneofValue = true
          if case .connected(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.state = .connected(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._defaultCapabilities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.state {
    case .offline?: try {
      guard case .offline(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .booting?: try {
      guard case .booting(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .idle?: try {
      guard case .idle(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .pairing?: try {
      guard case .pairing(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .connecting?: try {
      guard case .connecting(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .connected?: try {
      guard case .connected(let v)? = self.state else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Event.State, rhs: Arsdk_Microhard_Event.State) -> Bool {
    if lhs._defaultCapabilities != rhs._defaultCapabilities {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Event.HardwareError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_Event.protoMessageName + ".HardwareError"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cause"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.cause) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cause != .internal {
      try visitor.visitSingularEnumField(value: self.cause, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Event.HardwareError, rhs: Arsdk_Microhard_Event.HardwareError) -> Bool {
    if lhs.cause != rhs.cause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Event.Pairing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_Event.protoMessageName + ".Pairing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "failure"),
    2: .same(proto: "success"),
    3: .standard(proto: "network_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Arsdk_Microhard_PairingStatus.Failure?
        var hadOneofValue = false
        if let current = self.status {
          hadOneofValue = true
          if case .failure(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.status = .failure(v)
        }
      }()
      case 2: try {
        var v: Arsdk_Microhard_PairingStatus.Success?
        var hadOneofValue = false
        if let current = self.status {
          hadOneofValue = true
          if case .success(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.status = .success(v)
        }
      }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.networkID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.status {
    case .failure?: try {
      guard case .failure(let v)? = self.status else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .success?: try {
      guard case .success(let v)? = self.status else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    if !self.networkID.isEmpty {
      try visitor.visitSingularStringField(value: self.networkID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Event.Pairing, rhs: Arsdk_Microhard_Event.Pairing) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.networkID != rhs.networkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_Capabilities: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Capabilities"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_min"),
    2: .standard(proto: "channel_max"),
    3: .standard(proto: "power_min"),
    4: .standard(proto: "power_max"),
    5: .same(proto: "bandwidths"),
    6: .standard(proto: "encryption_algorithms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.channelMin) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.channelMax) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.powerMin) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.powerMax) }()
      case 5: try { try decoder.decodeRepeatedEnumField(value: &self.bandwidths) }()
      case 6: try { try decoder.decodeRepeatedEnumField(value: &self.encryptionAlgorithms) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.channelMin != 0 {
      try visitor.visitSingularUInt32Field(value: self.channelMin, fieldNumber: 1)
    }
    if self.channelMax != 0 {
      try visitor.visitSingularUInt32Field(value: self.channelMax, fieldNumber: 2)
    }
    if self.powerMin != 0 {
      try visitor.visitSingularUInt32Field(value: self.powerMin, fieldNumber: 3)
    }
    if self.powerMax != 0 {
      try visitor.visitSingularUInt32Field(value: self.powerMax, fieldNumber: 4)
    }
    if !self.bandwidths.isEmpty {
      try visitor.visitPackedEnumField(value: self.bandwidths, fieldNumber: 5)
    }
    if !self.encryptionAlgorithms.isEmpty {
      try visitor.visitPackedEnumField(value: self.encryptionAlgorithms, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_Capabilities, rhs: Arsdk_Microhard_Capabilities) -> Bool {
    if lhs.channelMin != rhs.channelMin {return false}
    if lhs.channelMax != rhs.channelMax {return false}
    if lhs.powerMin != rhs.powerMin {return false}
    if lhs.powerMax != rhs.powerMax {return false}
    if lhs.bandwidths != rhs.bandwidths {return false}
    if lhs.encryptionAlgorithms != rhs.encryptionAlgorithms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_ConnectionParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionParameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
    2: .same(proto: "power"),
    3: .same(proto: "bandwidth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.power) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.bandwidth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 1)
    }
    if self.power != 0 {
      try visitor.visitSingularUInt32Field(value: self.power, fieldNumber: 2)
    }
    if self.bandwidth != .bandwidth1Mhz {
      try visitor.visitSingularEnumField(value: self.bandwidth, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_ConnectionParameters, rhs: Arsdk_Microhard_ConnectionParameters) -> Bool {
    if lhs.channel != rhs.channel {return false}
    if lhs.power != rhs.power {return false}
    if lhs.bandwidth != rhs.bandwidth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".State"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_State, rhs: Arsdk_Microhard_State) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_State.Offline: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_State.protoMessageName + ".Offline"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_State.Offline, rhs: Arsdk_Microhard_State.Offline) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_State.Booting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_State.protoMessageName + ".Booting"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_State.Booting, rhs: Arsdk_Microhard_State.Booting) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_State.Idle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_State.protoMessageName + ".Idle"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_State.Idle, rhs: Arsdk_Microhard_State.Idle) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_State.Pairing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_State.protoMessageName + ".Pairing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "network_id"),
    2: .standard(proto: "pairing_parameters"),
    3: .standard(proto: "connection_parameters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.networkID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._pairingParameters) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._connectionParameters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.networkID.isEmpty {
      try visitor.visitSingularStringField(value: self.networkID, fieldNumber: 1)
    }
    try { if let v = self._pairingParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._connectionParameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_State.Pairing, rhs: Arsdk_Microhard_State.Pairing) -> Bool {
    if lhs.networkID != rhs.networkID {return false}
    if lhs._pairingParameters != rhs._pairingParameters {return false}
    if lhs._connectionParameters != rhs._connectionParameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_State.Connecting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_State.protoMessageName + ".Connecting"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_uid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceUid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceUid.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceUid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_State.Connecting, rhs: Arsdk_Microhard_State.Connecting) -> Bool {
    if lhs.deviceUid != rhs.deviceUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_State.Connected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_State.protoMessageName + ".Connected"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_uid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceUid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceUid.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceUid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_State.Connected, rhs: Arsdk_Microhard_State.Connected) -> Bool {
    if lhs.deviceUid != rhs.deviceUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_PairingParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PairingParameters"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "channel"),
    2: .same(proto: "power"),
    3: .same(proto: "bandwidth"),
    4: .standard(proto: "encryption_algorithm"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.channel) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.power) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.bandwidth) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.encryptionAlgorithm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 1)
    }
    if self.power != 0 {
      try visitor.visitSingularUInt32Field(value: self.power, fieldNumber: 2)
    }
    if self.bandwidth != .bandwidth1Mhz {
      try visitor.visitSingularEnumField(value: self.bandwidth, fieldNumber: 3)
    }
    if self.encryptionAlgorithm != .none {
      try visitor.visitSingularEnumField(value: self.encryptionAlgorithm, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_PairingParameters, rhs: Arsdk_Microhard_PairingParameters) -> Bool {
    if lhs.channel != rhs.channel {return false}
    if lhs.power != rhs.power {return false}
    if lhs.bandwidth != rhs.bandwidth {return false}
    if lhs.encryptionAlgorithm != rhs.encryptionAlgorithm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_PairingStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PairingStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_PairingStatus, rhs: Arsdk_Microhard_PairingStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_PairingStatus.Failure: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_PairingStatus.protoMessageName + ".Failure"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reason != .internalError {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_PairingStatus.Failure, rhs: Arsdk_Microhard_PairingStatus.Failure) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Microhard_PairingStatus.Success: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Microhard_PairingStatus.protoMessageName + ".Success"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_uid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceUid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceUid.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceUid, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Microhard_PairingStatus.Success, rhs: Arsdk_Microhard_PairingStatus.Success) -> Bool {
    if lhs.deviceUid != rhs.deviceUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
