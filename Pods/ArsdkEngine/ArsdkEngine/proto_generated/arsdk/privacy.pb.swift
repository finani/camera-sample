// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: arsdk/privacy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Arsdk_Privacy_LogConfigPersistence: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Persistent configuration. 
  case persistent // = 0

  /// Configuration will only be valid for the current device boot.
  ///Configuration will revert to the default factory configuration after the device reboots (and not the previous persistent one). 
  case oneshot // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .persistent
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .persistent
    case 1: self = .oneshot
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .persistent: return 0
    case .oneshot: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Privacy_LogConfigPersistence: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Privacy_LogConfigPersistence] = [
    .persistent,
    .oneshot,
  ]
}

#endif  // swift(>=4.2)

enum Arsdk_Privacy_LogStorage: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Logs are written to persistent storage. 
  case persistent // = 0

  /// Logs are written to volatile storage, non persistent across reboots.
  ///Some logs will be disabled in this mode. 
  case volatile // = 1

  /// Logs are not written. 
  case none // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .persistent
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .persistent
    case 1: self = .volatile
    case 2: self = .none
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .persistent: return 0
    case .volatile: return 1
    case .none: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Arsdk_Privacy_LogStorage: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Arsdk_Privacy_LogStorage] = [
    .persistent,
    .volatile,
    .none,
  ]
}

#endif  // swift(>=4.2)

struct Arsdk_Privacy_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Arsdk_Privacy_Command.OneOf_ID? = nil

  var getState: Arsdk_Privacy_Command.GetState {
    get {
      if case .getState(let v)? = id {return v}
      return Arsdk_Privacy_Command.GetState()
    }
    set {id = .getState(newValue)}
  }

  var setLogMode: Arsdk_Privacy_Command.SetLogMode {
    get {
      if case .setLogMode(let v)? = id {return v}
      return Arsdk_Privacy_Command.SetLogMode()
    }
    set {id = .setLogMode(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    case getState(Arsdk_Privacy_Command.GetState)
    case setLogMode(Arsdk_Privacy_Command.SetLogMode)

  #if !swift(>=4.1)
    static func ==(lhs: Arsdk_Privacy_Command.OneOf_ID, rhs: Arsdk_Privacy_Command.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.getState, .getState): return {
        guard case .getState(let l) = lhs, case .getState(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.setLogMode, .setLogMode): return {
        guard case .setLogMode(let l) = lhs, case .setLogMode(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// Get Current State.
  ///A State event is expected afterwards. 
  struct GetState {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var includeDefaultCapabilities: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  /// Set log mode.
  ///A State event is expected afterwards. 
  struct SetLogMode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var logStorage: Arsdk_Privacy_LogStorage = .persistent

    var logConfigPersistence: Arsdk_Privacy_LogConfigPersistence = .persistent

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct Arsdk_Privacy_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Arsdk_Privacy_Event.OneOf_ID? = nil

  var state: Arsdk_Privacy_Event.State {
    get {
      if case .state(let v)? = id {return v}
      return Arsdk_Privacy_Event.State()
    }
    set {id = .state(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_ID: Equatable {
    case state(Arsdk_Privacy_Event.State)

  #if !swift(>=4.1)
    static func ==(lhs: Arsdk_Privacy_Event.OneOf_ID, rhs: Arsdk_Privacy_Event.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.state, .state): return {
        guard case .state(let l) = lhs, case .state(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  /// Sent after GetState or SetLogMode is received, or on changes. 
  struct State {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Only present if triggered from a GetState with include_default_capabilities == true. 
    var defaultCapabilities: Arsdk_Privacy_Capabilities {
      get {return _defaultCapabilities ?? Arsdk_Privacy_Capabilities()}
      set {_defaultCapabilities = newValue}
    }
    /// Returns true if `defaultCapabilities` has been explicitly set.
    var hasDefaultCapabilities: Bool {return self._defaultCapabilities != nil}
    /// Clears the value of `defaultCapabilities`. Subsequent reads from it will return its default value.
    mutating func clearDefaultCapabilities() {self._defaultCapabilities = nil}

    var logStorage: Arsdk_Privacy_LogStorage = .persistent

    var logConfigPersistence: Arsdk_Privacy_LogConfigPersistence = .persistent

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _defaultCapabilities: Arsdk_Privacy_Capabilities? = nil
  }

  init() {}
}

struct Arsdk_Privacy_Capabilities {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var supportedLogStorage: [Arsdk_Privacy_LogStorage] = []

  var supportedLogConfigPersistence: [Arsdk_Privacy_LogConfigPersistence] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "arsdk.privacy"

extension Arsdk_Privacy_LogConfigPersistence: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOG_CONFIG_PERSISTENCE_PERSISTENT"),
    1: .same(proto: "LOG_CONFIG_PERSISTENCE_ONESHOT"),
  ]
}

extension Arsdk_Privacy_LogStorage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOG_STORAGE_PERSISTENT"),
    1: .same(proto: "LOG_STORAGE_VOLATILE"),
    2: .same(proto: "LOG_STORAGE_NONE"),
  ]
}

extension Arsdk_Privacy_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Command"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .standard(proto: "get_state"),
    17: .standard(proto: "set_log_mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 16: try {
        var v: Arsdk_Privacy_Command.GetState?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .getState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .getState(v)
        }
      }()
      case 17: try {
        var v: Arsdk_Privacy_Command.SetLogMode?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .setLogMode(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .setLogMode(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.id {
    case .getState?: try {
      guard case .getState(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .setLogMode?: try {
      guard case .setLogMode(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Privacy_Command, rhs: Arsdk_Privacy_Command) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Privacy_Command.GetState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Privacy_Command.protoMessageName + ".GetState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "include_default_capabilities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.includeDefaultCapabilities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.includeDefaultCapabilities != false {
      try visitor.visitSingularBoolField(value: self.includeDefaultCapabilities, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Privacy_Command.GetState, rhs: Arsdk_Privacy_Command.GetState) -> Bool {
    if lhs.includeDefaultCapabilities != rhs.includeDefaultCapabilities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Privacy_Command.SetLogMode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Privacy_Command.protoMessageName + ".SetLogMode"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "log_storage"),
    2: .standard(proto: "log_config_persistence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.logStorage) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.logConfigPersistence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.logStorage != .persistent {
      try visitor.visitSingularEnumField(value: self.logStorage, fieldNumber: 1)
    }
    if self.logConfigPersistence != .persistent {
      try visitor.visitSingularEnumField(value: self.logConfigPersistence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Privacy_Command.SetLogMode, rhs: Arsdk_Privacy_Command.SetLogMode) -> Bool {
    if lhs.logStorage != rhs.logStorage {return false}
    if lhs.logConfigPersistence != rhs.logConfigPersistence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Privacy_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    16: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 16: try {
        var v: Arsdk_Privacy_Event.State?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .state(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .state(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .state(let v)? = self.id {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Privacy_Event, rhs: Arsdk_Privacy_Event) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Privacy_Event.State: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Arsdk_Privacy_Event.protoMessageName + ".State"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "default_capabilities"),
    2: .standard(proto: "log_storage"),
    3: .standard(proto: "log_config_persistence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._defaultCapabilities) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.logStorage) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.logConfigPersistence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._defaultCapabilities {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.logStorage != .persistent {
      try visitor.visitSingularEnumField(value: self.logStorage, fieldNumber: 2)
    }
    if self.logConfigPersistence != .persistent {
      try visitor.visitSingularEnumField(value: self.logConfigPersistence, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Privacy_Event.State, rhs: Arsdk_Privacy_Event.State) -> Bool {
    if lhs._defaultCapabilities != rhs._defaultCapabilities {return false}
    if lhs.logStorage != rhs.logStorage {return false}
    if lhs.logConfigPersistence != rhs.logConfigPersistence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Arsdk_Privacy_Capabilities: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Capabilities"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "supported_log_storage"),
    2: .standard(proto: "supported_log_config_persistence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.supportedLogStorage) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.supportedLogConfigPersistence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.supportedLogStorage.isEmpty {
      try visitor.visitPackedEnumField(value: self.supportedLogStorage, fieldNumber: 1)
    }
    if !self.supportedLogConfigPersistence.isEmpty {
      try visitor.visitPackedEnumField(value: self.supportedLogConfigPersistence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Arsdk_Privacy_Capabilities, rhs: Arsdk_Privacy_Capabilities) -> Bool {
    if lhs.supportedLogStorage != rhs.supportedLogStorage {return false}
    if lhs.supportedLogConfigPersistence != rhs.supportedLogConfigPersistence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
